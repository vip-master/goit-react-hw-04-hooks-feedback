{"version":3,"sources":["Components/section/Section.js","Components/statistics/Statistics.js","Components/notification/Notification.js","Components/feedbackOptions/FeedbackOptions.js","App/App.js","index.js"],"names":["Section","title","children","Statistics","justProps","Object","keys","map","label","Notification","StyledList","styled","ul","FeedbackOptions","options","onLeaveFeedback","option","type","id","onClick","init","good","neutral","bad","App","useState","state","setState","total","positivePercentage","o","Math","round","calculateStats","e","target","ReactDOM","render","document","getElementById"],"mappings":"0NAgBeA,MAbf,YAAwD,IAAD,IAArCC,aAAqC,MAA/B,mBAA+B,EAAXC,EAAW,EAAXA,SACxC,OACI,oCACI,6BAAKD,IACJC,MCmBEC,MAvBf,SAAoBC,GAChB,OACI,6BACIC,OAAOC,KAAKF,GAAWG,KACpB,SAAAC,GAAK,OACD,+BACI,6BAAKA,IACL,iCAAOJ,EAAUI,GAAgB,uBAARA,GAAgC,SAFpDA,SCEbC,I,EAAAA,EARf,WACI,OACI,gM,OCAFC,E,MAAWC,EAAOC,GAAR,sFAsBDC,MAjBf,YAAsD,IAA5BC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,gBAC/B,OACI,cAACL,EAAD,UACKI,EAAQP,KAAI,SAAAS,GAAM,OACf,6BACI,wBAAQC,KAAK,SAASC,GAAIF,EAAQG,QAASJ,EAA3C,SAA6DC,KADxDA,SCPnBI,EAAK,CACPC,KAAM,EACNC,QAAS,EACTC,IAAK,GA+CMC,EA5CL,WAEN,MAAwBC,mBAASL,GAAjC,mBAAOM,EAAP,KAAcC,EAAd,KAEMb,EAAQT,OAAOC,KAAKc,GAsB1B,EAhBqB,WAEjB,IAAIQ,EAAM,EACNC,EAAmB,EAUvB,OARAf,EAAQP,KAAI,SAAAuB,GAAC,OAAEF,GAAOF,EAAMI,MAG5BD,EADa,IAAbH,EAAML,KACa,EACY,IAAXK,EAAML,KAASO,EAEnCC,EAAmBE,KAAKC,MAAyB,IAAnBH,GAAwB,IAE/C,CAACD,QAAMC,sBAGeI,GAA1BL,EAAP,EAAOA,MAAMC,EAAb,EAAaA,mBAEb,OACI,qCACG,cAAC,EAAD,CAAS5B,MAAM,+CAAf,SACK,cAAC,EAAD,CAAiBa,QAASA,EAASC,gBAzB1B,SAACmB,GAClBP,EAAS,2BAAID,GAAL,kBAAaQ,EAAEC,OAAOjB,GAAIQ,EAAMQ,EAAEC,OAAOjB,IAAI,UA0BlD,cAAC,EAAD,CAASjB,MAAM,wBAAf,SACc,IAAR2B,EACD,cAAC,EAAD,IACA,cAAC,EAAD,2BAAgBF,GAAhB,IACAE,MAAOA,EACPC,mBAAoBA,WC7CpCO,IAASC,OACL,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6bbea452.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Section({title=\"Title of Section\", children}) {\n    return (\n        <section>\n            <h2>{title}</h2>\n            {children}\n        </section>\n    )\n}\n\nSection.propTypes = {\n    title: PropTypes.string,\n}\n\nexport default Section\n\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nfunction Statistics(justProps) {\n    return (\n        <ul>\n           {Object.keys(justProps).map(\n               label=>(\n                   <li key={label}>\n                       <h3>{label}</h3>\n                       <span>{justProps[label]}{label===\"positivePercentage\" && \"%\"}</span>\n                   </li>\n               )\n           )} \n        </ul>\n    )\n}\n\nStatistics.propTypes = {\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    positivePercentage: PropTypes.number.isRequired\n}\n\nexport default Statistics\n\n","import React from 'react'\n\nfunction Notification() {\n    return (\n        <h3>\n           Unfortunatelly, nobody has voted yet. Maybe our services are unuseful so nobody don't use it and vote it. But one is definitely true that WE DON'T BUY VOTES!     \n        </h3>\n    )\n}\n\nexport default Notification\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst StyledList=styled.ul`\n    display: flex;\n    justify-content: 'space-around',\n`;\n\nfunction FeedbackOptions({options, onLeaveFeedback}) {\n    return (\n        <StyledList>\n            {options.map(option=>(\n                <li key={option}>\n                    <button type=\"button\" id={option} onClick={onLeaveFeedback}>{option}</button>\n                </li>\n            ))}\n        </StyledList>\n    )\n}\n\nFeedbackOptions.propTypes = {\n    options: PropTypes.arrayOf(PropTypes.string).isRequired,\n    onLeaveFeedback: PropTypes.func.isRequired,\n}\n\nexport default FeedbackOptions\n\n","import React, { useState } from 'react';\nimport Section from '../Components/section/Section'\nimport Statistics from '../Components/statistics/Statistics';\nimport Notification from '../Components/notification/Notification';\nimport FeedbackOptions from '../Components/feedbackOptions/FeedbackOptions';\n\nconst init={\n    good: 0,\n    neutral: 0,\n    bad: 0\n};\n\nconst App=()=>{\n    \n    const [state, setState]=useState(init)\n\n    const options=Object.keys(init)\n\n    const handlerOfAll = (e)=>{\n        setState({...state, [e.target.id]:state[e.target.id]+1})        \n    }\n\n    const calculateStats=()=>{      \n\n        let total=0\n        let positivePercentage=0\n\n        options.map(o=>total+=state[o])\n\n        state.good===0?\n        positivePercentage=0:\n        positivePercentage=(state.good*100/total)\n\n        positivePercentage=Math.round(positivePercentage*100)/100\n\n        return {total,positivePercentage}\n    }\n\n    const {total,positivePercentage}=calculateStats()\n\n    return (\n        <>\n           <Section title=\"Buttons to vote (10$ per one, ask Mr. Burke)\">\n                <FeedbackOptions options={options} onLeaveFeedback={handlerOfAll}/>\n           </Section>\n           <Section title=\"Incorruptible votes: \">\n                {total===0 ?\n                <Notification/>:\n                <Statistics {...state} \n                total={total} \n                positivePercentage={positivePercentage}/>}\n           </Section>\n        </>\n    )\n}\n\nexport default App","import \"./normalize.css\"\nimport \"./globalStyles.css\"\nimport ReactDOM from 'react-dom'\nimport App from \"./App/App\";\n\nReactDOM.render(\n    <App/>,\n    document.getElementById(\"root\")\n)\n"],"sourceRoot":""}